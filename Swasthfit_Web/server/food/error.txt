import React, { useEffect, useState } from "react";
import Navbar from "../components/Navbar";
import Sidebar from "../components/SideBar";
import Footer from "../components/Footer";
import axios from "axios";
import c3 from "../assets/images/food-icon/c-3.png";

const Listing = () => {
  const [categories, setCategories] = useState([]);
  const [baseUrl, setBaseUrl] = useState("");
  const [editCategory, setEditCategory] = useState(null);
  const [showModal, setShowModal] = useState(false);

  useEffect(() => {
    fetchCategories();
  }, []);

  const fetchCategories = async () => {
    try {
      const authToken = localStorage.getItem("authToken");
      const res = await axios.get(
        "http://localhost:4001/category/site/apis/categories",
        {
          headers: {
            Authorization: `Bearer ${authToken}`,
          },
        }
      );
      setCategories(res.data.data.categories || []);
      setBaseUrl(res.data.data.baseUrl || "");
    } catch (error) {
      console.error("Error fetching categories", error);
    }
  };

  const handleDeleteCategory = async (categoryId) => {
    if (!window.confirm("Are you sure you want to delete this category?")) {
      return;
    }

    try {
      const authToken = localStorage.getItem("authToken");
      await axios.delete(
        `http://localhost:4001/category/site/apis/categories/${categoryId}`,
        {
          headers: {
            Authorization: `Bearer ${authToken}`,
          },
        }
      );
      setCategories(categories.filter(category => category.id !== categoryId));
      alert("Category deleted successfully!");
    } catch (error) {
      console.error("Error deleting category", error);
      alert("Error deleting category. Please try again.");
    }
  };

  const handleView = async (categoryId) => {
    try {
      const authToken = localStorage.getItem("authToken");
      const res = await axios.get(
        `http://localhost:4001/category/site/apis/categories/${categoryId}`,
        {
          headers: {
            Authorization: `Bearer ${authToken}`,
          },
        }
      );
      const category = res.data.data;
      alert(`
        Name: ${category.name}
        Description: ${category.description || "N/A"}
        Parent ID: ${category.parent_id || "N/A"}
        Status: ${category.status ? "Active" : "Inactive"}
      `);
    } catch (error) {
      console.error("Error fetching category details", error);
      alert("Failed to fetch category details.");
    }
  };

  const handleEdit = async (categoryId) => {
    try {
      const authToken = localStorage.getItem("authToken");
      const res = await axios.get(
        `http://localhost:4001/category/site/apis/categories/${categoryId}`,
        {
          headers: {
            Authorization: `Bearer ${authToken}`,
          },
        }
      );
      setEditCategory(res.data.data);
      setShowModal(true);
    } catch (error) {
      console.error("Error fetching category details", error);
      alert("Failed to fetch category details.");
    }
  };

  const handleUpdate = async (e) => {
    e.preventDefault();
    try {
      const authToken = localStorage.getItem("authToken");
      const formData = new FormData();
      formData.append("name", editCategory.name);
      formData.append("description", editCategory.description || "");
      formData.append("parent_id", editCategory.parent_id || "");
      formData.append("status", editCategory.status ? "1" : "0");
      
      if (editCategory.newImage) {
        formData.append("img", editCategory.newImage);
      }

      await axios.put(
        `http://localhost:4001/category/site/apis/categories/${editCategory.id}`,
        formData,
        {
          headers: {
            Authorization: `Bearer ${authToken}`,
            "Content-Type": "multipart/form-data",
          },
        }
      );

      alert("Category updated successfully!");
      setShowModal(false);
      fetchCategories();
    } catch (error) {
      console.error("Error updating category", error);
      alert("Failed to update category.");
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setEditCategory(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleFileChange = (e) => {
    setEditCategory(prev => ({
      ...prev,
      newImage: e.target.files[0]
    }));
  };

  const handleExport = async () => {
    try {
      const authToken = localStorage.getItem("authToken");
      const response = await axios({
        url: "http://localhost:4001/category/site/apis/categories/export",
        method: "GET",
        headers: {
          Authorization: `Bearer ${authToken}`,
        },
        responseType: "blob"
      });
      
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement("a");
      link.href = url;
      link.setAttribute("download", "categories.csv");
      document.body.appendChild(link);
      link.click();
      link.remove();
    } catch (error) {
      console.error("Error exporting categories", error);
      alert("Failed to export categories");
    }
  };

  const handleImport = async (e) => {
    try {
      const file = e.target.files[0];
      if (!file) return;

      const authToken = localStorage.getItem("authToken");
      const formData = new FormData();
      formData.append("file", file);

      await axios.post(
        "http://localhost:4001/category/site/apis/categories/import",
        formData,
        {
          headers: {
            Authorization: `Bearer ${authToken}`,
            "Content-Type": "multipart/form-data",
          },
        }
      );

      alert("Categories imported successfully!");
      fetchCategories(); // Refresh the list
    } catch (error) {
      console.error("Error importing categories", error);
      alert("Failed to import categories");
    }
  };

  // Update the dropdown menu in the return section
  <div className="dropdown-menu dropdown-menu-end">
    <a href="#!" className="dropdown-item" onClick={handleExport}>
      Export
    </a>
    <label className="dropdown-item mb-0" style={{ cursor: "pointer" }}>
      Import
      <input
        type="file"
        accept=".csv"
        style={{ display: "none" }}
        onChange={handleImport}
      />
    </label>
  </div>
  return (
    <>
      <div className="wrapper" style={{ width: "1350px" }}>
        <Navbar />
        <Sidebar />
        <div className="page-container">
          <div className="page-content">
            {/* Category Table */}
            <div className="row">
              <div className="col-xl-12">
                <div className="card">
                  <div className="card-header d-flex justify-content-between align-items-center">
                    <div>
                      <p className="card-title mb-0">Total Categories</p>
                    </div>
                    <div className="dropdown">
                      <a
                        href="#"
                        className="dropdown-toggle btn btn-sm btn-outline-light rounded"
                        data-bs-toggle="dropdown"
                        aria-expanded="false"
                      >
                        Reports
                      </a>
                      <div className="dropdown-menu dropdown-menu-end">
                        <a href="#!" className="dropdown-item">
                          Export
                        </a>
                        <a href="#!" className="dropdown-item">
                          Import
                        </a>
                      </div>
                    </div>
                  </div>
                  <div className="table-responsive">
                    <table className="table align-middle mb-0 table-hover table-centered">
                      <thead className="bg-light-subtle">
                        <tr>
                          <th>Categories ID</th>
                          <th>Categories Photo</th>
                          <th>Categories Name</th>
                          <th>Status</th>
                          <th>Action</th>
                        </tr>
                      </thead>
                      <tbody>
                        {categories.length > 0 ? (
                          categories.map((category) => (
                            <tr key={category.id}>
                              <td>#{category.id}</td>
                              <td>
                                <img
  src={c3}
  alt=""
  style={{
    width: "50px",
    height: "50px",
    objectFit: "cover",
  }}
/>
                              </td>
                              <td>
                                <a
                                  href="#!"
                                  className="fw-semibold link-primary fs-15"
                                >
                                  {category.name?.trim()}
                                </a>
                              </td>
                              <td>
                                <span
                                  className={`badge ${
                                    category.status
                                      ? "bg-success-subtle border border-success text-success"
                                      : "bg-danger-subtle border border-danger text-danger"
                                  } px-2 py-1 fs-11`}
                                >
                                  {category.status ? "Active" : "Inactive"}
                                </span>
                              </td>
                              <td>
                                <div className="d-flex gap-3">
                                  <a
                                    href="#!"
                                    className="text-muted"
                                    onClick={() => handleView(category.id)}
                                  >
                                    <i className="ri-eye-line align-middle fs-20" />
                                  </a>

                                  <a 
                                    href="#!" 
                                    className="link-dark" 
                                    onClick={() => handleEdit(category.id)}
                                  >
                                    <i className="ri-edit-line align-middle fs-20" />
                                  </a>

                                  <a
                                    href="#!"
                                    className="link-danger"
                                    onClick={() => handleDeleteCategory(category.id)}
                                  >
                                    <i className="ri-delete-bin-5-line align-middle fs-20" />
                                  </a>
                                </div>
                              </td>
                            </tr>
                          ))
                        ) : (
                          <tr>
                            <td colSpan="5" className="text-center">
                              No categories found.
                            </td>
                          </tr>
                        )}
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Edit Modal */}
        {showModal && editCategory && (
          <div className="modal fade show" style={{ display: 'block', backgroundColor: 'rgba(0,0,0,0.5)' }}>
            <div className="modal-dialog modal-dialog-centered">
              <div className="modal-content">
                <div className="modal-header">
                  <h5 className="modal-title">Edit Category</h5>
                  <button 
                    type="button" 
                    className="btn-close" 
                    onClick={() => setShowModal(false)}
                  ></button>
                </div>
                <div className="modal-body">
                  <form onSubmit={handleUpdate}>
                    <div className="mb-3">
                      <label className="form-label">Name</label>
                      <input
                        type="text"
                        className="form-control"
                        name="name"
                        value={editCategory.name || ''}
                        onChange={handleInputChange}
                        required
                      />
                    </div>
                    <div className="mb-3">
                      <label className="form-label">Description</label>
                      <textarea
                        className="form-control"
                        name="description"
                        value={editCategory.description || ''}
                        onChange={handleInputChange}
                      ></textarea>
                    </div>
                    <div className="mb-3">
                      <label className="form-label">Parent ID</label>
                      <input
                        type="text"
                        className="form-control"
                        name="parent_id"
                        value={editCategory.parent_id || ''}
                        onChange={handleInputChange}
                      />
                    </div>
                    <div className="mb-3">
                      <label className="form-label">Status</label>
                      <select
                        className="form-select"
                        name="status"
                        value={editCategory.status ? "1" : "0"}
                        onChange={(e) => setEditCategory({
                          ...editCategory,
                          status: e.target.value === "1"
                        })}
                      >
                        <option value="1">Active</option>
                        <option value="0">Inactive</option>
                      </select>
                    </div>
                    <div className="mb-3">
                      <label className="form-label">Image</label>
                      <input
                        type="file"
                        className="form-control"
                        onChange={handleFileChange}
                      />
                      {editCategory.img && !editCategory.newImage && (
                        <img 
                          src={`${baseUrl}${editCategory.img}`} 
                          alt="Current" 
                          style={{ width: '100px', marginTop: '10px' }}
                        />
                      )}
                    </div>
                    <div className="modal-footer">
                      <button 
                        type="button" 
                        className="btn btn-secondary" 
                        onClick={() => setShowModal(false)}
                      >
                        Close
                      </button>
                      <button type="submit" className="btn btn-primary">
                        Save Changes
                      </button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
      <Footer />
    </>
  );
};

export default Listing;